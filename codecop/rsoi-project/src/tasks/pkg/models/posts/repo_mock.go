// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package posts is a generated GoMock package.
package posts

// import (
// 	comments "redditclone/pkg/model/comments"
// 	reflect "reflect"

// 	gomock "github.com/golang/mock/gomock"
// )

// // MockPostsRepo is a mock of PostsRepo interface.
// type MockPostsRepo struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockPostsRepoMockRecorder
// }

// // MockPostsRepoMockRecorder is the mock recorder for MockPostsRepo.
// type MockPostsRepoMockRecorder struct {
// 	mock *MockPostsRepo
// }

// // NewMockPostsRepo creates a new mock instance.
// func NewMockPostsRepo(ctrl *gomock.Controller) *MockPostsRepo {
// 	mock := &MockPostsRepo{ctrl: ctrl}
// 	mock.recorder = &MockPostsRepoMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockPostsRepo) EXPECT() *MockPostsRepoMockRecorder {
// 	return m.recorder
// }

// // Add mocks base method.
// func (m *MockPostsRepo) Add(post *Post) (string, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "Add", post)
// 	ret0, _ := ret[0].(string)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // Add indicates an expected call of Add.
// func (mr *MockPostsRepoMockRecorder) Add(post interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPostsRepo)(nil).Add), post)
// }

// // AddComment mocks base method.
// func (m *MockPostsRepo) AddComment(post *Post, comment *comments.Comment) (string, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "AddComment", post, comment)
// 	ret0, _ := ret[0].(string)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // AddComment indicates an expected call of AddComment.
// func (mr *MockPostsRepoMockRecorder) AddComment(post, comment interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostsRepo)(nil).AddComment), post, comment)
// }

// // Delete mocks base method.
// func (m *MockPostsRepo) Delete(id string) (bool, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "Delete", id)
// 	ret0, _ := ret[0].(bool)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // Delete indicates an expected call of Delete.
// func (mr *MockPostsRepoMockRecorder) Delete(id interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostsRepo)(nil).Delete), id)
// }

// // DeleteComment mocks base method.
// func (m *MockPostsRepo) DeleteComment(commentid string, post *Post) (bool, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "DeleteComment", commentid, post)
// 	ret0, _ := ret[0].(bool)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // DeleteComment indicates an expected call of DeleteComment.
// func (mr *MockPostsRepoMockRecorder) DeleteComment(commentid, post interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostsRepo)(nil).DeleteComment), commentid, post)
// }

// // GetAll mocks base method.
// func (m *MockPostsRepo) GetAll() ([]*Post, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetAll")
// 	ret0, _ := ret[0].([]*Post)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetAll indicates an expected call of GetAll.
// func (mr *MockPostsRepoMockRecorder) GetAll() *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostsRepo)(nil).GetAll))
// }

// // GetAllByCategory mocks base method.
// func (m *MockPostsRepo) GetAllByCategory(category string) ([]*Post, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetAllByCategory", category)
// 	ret0, _ := ret[0].([]*Post)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetAllByCategory indicates an expected call of GetAllByCategory.
// func (mr *MockPostsRepoMockRecorder) GetAllByCategory(category interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByCategory", reflect.TypeOf((*MockPostsRepo)(nil).GetAllByCategory), category)
// }

// // GetAllByUser mocks base method.
// func (m *MockPostsRepo) GetAllByUser(username string) ([]*Post, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetAllByUser", username)
// 	ret0, _ := ret[0].([]*Post)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetAllByUser indicates an expected call of GetAllByUser.
// func (mr *MockPostsRepoMockRecorder) GetAllByUser(username interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockPostsRepo)(nil).GetAllByUser), username)
// }

// // GetByID mocks base method.
// func (m *MockPostsRepo) GetByID(id string) (*Post, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetByID", id)
// 	ret0, _ := ret[0].(*Post)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetByID indicates an expected call of GetByID.
// func (mr *MockPostsRepoMockRecorder) GetByID(id interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostsRepo)(nil).GetByID), id)
// }

// // GetByIDWithDownvote mocks base method.
// func (m *MockPostsRepo) GetByIDWithDownvote(id, userID string) (*Post, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetByIDWithDownvote", id, userID)
// 	ret0, _ := ret[0].(*Post)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetByIDWithDownvote indicates an expected call of GetByIDWithDownvote.
// func (mr *MockPostsRepoMockRecorder) GetByIDWithDownvote(id, userID interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithDownvote", reflect.TypeOf((*MockPostsRepo)(nil).GetByIDWithDownvote), id, userID)
// }

// // GetByIDWithUndoVote mocks base method.
// func (m *MockPostsRepo) GetByIDWithUndoVote(id, userID string) (*Post, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetByIDWithUndoVote", id, userID)
// 	ret0, _ := ret[0].(*Post)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetByIDWithUndoVote indicates an expected call of GetByIDWithUndoVote.
// func (mr *MockPostsRepoMockRecorder) GetByIDWithUndoVote(id, userID interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithUndoVote", reflect.TypeOf((*MockPostsRepo)(nil).GetByIDWithUndoVote), id, userID)
// }

// // GetByIDWithUpvote mocks base method.
// func (m *MockPostsRepo) GetByIDWithUpvote(id, userID string) (*Post, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetByIDWithUpvote", id, userID)
// 	ret0, _ := ret[0].(*Post)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // GetByIDWithUpvote indicates an expected call of GetByIDWithUpvote.
// func (mr *MockPostsRepoMockRecorder) GetByIDWithUpvote(id, userID interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithUpvote", reflect.TypeOf((*MockPostsRepo)(nil).GetByIDWithUpvote), id, userID)
// }

// // Update mocks base method.
// func (m *MockPostsRepo) Update(newPost *Post) (bool, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "Update", newPost)
// 	ret0, _ := ret[0].(bool)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // Update indicates an expected call of Update.
// func (mr *MockPostsRepoMockRecorder) Update(newPost interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostsRepo)(nil).Update), newPost)
// }
