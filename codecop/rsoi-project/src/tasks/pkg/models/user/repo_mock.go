// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package user is a generated GoMock package.
package user

// import (
// 	reflect "reflect"

// 	gomock "github.com/golang/mock/gomock"
// )

// // MockUserRepo is a mock of UserRepo interface.
// type MockUserRepo struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockUserRepoMockRecorder
// }

// // MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
// type MockUserRepoMockRecorder struct {
// 	mock *MockUserRepo
// }

// // NewMockUserRepo creates a new mock instance.
// func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
// 	mock := &MockUserRepo{ctrl: ctrl}
// 	mock.recorder = &MockUserRepoMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
// 	return m.recorder
// }

// // Authorize mocks base method.
// func (m *MockUserRepo) Authorize(login, pass string) (*User, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "Authorize", login, pass)
// 	ret0, _ := ret[0].(*User)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // Authorize indicates an expected call of Authorize.
// func (mr *MockUserRepoMockRecorder) Authorize(login, pass interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUserRepo)(nil).Authorize), login, pass)
// }

// // Register mocks base method.
// func (m *MockUserRepo) Register(login, pass string) (*User, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "Register", login, pass)
// 	ret0, _ := ret[0].(*User)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // Register indicates an expected call of Register.
// func (mr *MockUserRepoMockRecorder) Register(login, pass interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserRepo)(nil).Register), login, pass)
// }
